--Database was uploaded into SQLite editor. 


--How many orders were placed in January?

```SQL

SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

```
    --WHERE and AND commands ensure clean data in this particular database.
    

--How many of those orders were for an iPhone?
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID';




--Select the customer account numbers for all the orders that were placed in February.
SELECT customers.acctnum
FROM BIT_DB.FebSales 
JOIN customers 
ON customers.order_id=FebSales.orderID;




--Which product was the cheapest one sold in January, and what was the price?
        --SUBQUERY I THINK 
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE price <= (SELECT MIN (price) FROM BIT_DB.JanSales)
LIMIT 1;




--What is the total revenue for each product sold in January?
SELECT product, SUM(quantity)*price AS revenue
FROM BIT_DB.JanSales
WHERE Product IS NOT NULL AND Product <> ' '
GROUP BY product
ORDER BY revenue DESC;




--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT product, COUNT(product) AS amt_sold, SUM(Quantity)*price AS revenue
FROM BIT_DB.FEBSales 
WHERE location LIKE '%548 Lincoln St%';




--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT COUNT(distinct cust.acctnum), avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID';




--Find orders between February 13, 2019 to February 18, 2019.
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';




--Find the number of orders made on February 18, 2019.
SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate LIKE '02/18/19%';




--List all of the products sold in Los Angeles, in February, and include how many of each were sold.

SELECT product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY product;




--Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).
SELECT location, COUNT(location)
FROM BIT_DB.JanSales
WHERE location LIKE '%New York%'
GROUP BY location
HAVING COUNT(location)>=3;




--How many of each type of headphone were sold in February?
SELECT product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE product LIKE '%headphone%'
GROUP BY product;




--What was the average amount spent per account in February? (Hints: For this question, we want the average amount spent / number of accounts, not the amount spent by each account. To multiply, you can use the * symbol, and to divide, you can use the / symbol.)
SELECT distinct cust.acctnum, AVG(feb.price)
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON cust.order_id=feb.orderID
GROUP BY cust.acctnum;




--What was the average quantity of products purchased per account in February? (Hint: just like question 3, we want the overall average, not the average for each account individually).
SELECT AVG(quantity)
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON cust.order_id=feb.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';




--Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, SUM(quantity*price) AS revenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY product DESC
LIMIT 1;




